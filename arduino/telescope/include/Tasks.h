#ifndef __TASK_H__
#define __TASK_H__

#include <Arduino_FreeRTOS.h>
#include <lib\FreeRTOS-Kernel-v10.5.1\message_buffer.h>

#include "Wifi.h"

/// UID for each task
enum TaskID
{
  TASK_COLLECT_TELEMETRY,
  TASK_RECEIVE_COMMAND,
  TASK_MOVE_SERVO,
  TASK_PLAN_TRAJECTORY,
  NUM_TASKS,
};

/// Collect Telemetry Task Info
struct TaskCollectTelemetryInfo
{
  static constexpr const char* const NAME{"CollectTelem"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{100};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Receive Command Task Info
struct TaskReceiveCommandInfo
{
  static constexpr const char* const NAME{"ReceiveCommand"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{250};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Move Servo Task Info
struct TaskMoveServoInfo
{
  static constexpr const char* const NAME{"MoveServo"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{100};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Receive Command Task Parameters
struct RecvCmdParams
{
  WiFiUDP* cmdReceiver; ///< Pointer to the command receiver object
  TaskHandle_t* taskHandles; ///< Pointer to the array of task handles
  MessageBufferHandle_t* msgBufferHandles; ///< Pointer to the array of message buffer handles
};

/// Create all tasks needed for the lifetime of the telescope
///
/// @param[in] taskParams An array of pointers to the task parameters for each task.
///                       Parameter pointers within the container may be nullptr
/// @param[out] taskHandles An array of pointers to task handles generated by each
///                         task create call
///
/// @return The result of creating the tasks. pdPASS if successful
BaseType_t createTasks(void* taskParams[NUM_TASKS],
                       TaskHandle_t taskHandles[NUM_TASKS]); 

/// Periodically collect and report telemetry via the configured data interface
///
/// @param[in] params Holds parameters for the task. Unused here
void taskCollectTelemetry(void* params);

/// Receive commands from the configured command interface and execute them
///
/// @param[in] params Holds parameters for the task. Unused here
void taskReceiveCommand(void* params);

/// Move the servos to the specified positions
///
/// @param[in] params Holds position information for the move
void taskMoveServo(void* params);

#endif