#ifndef __TASK_H__
#define __TASK_H__

#include <Arduino_FreeRTOS.h>
#include <lib\FreeRTOS-Kernel-v10.5.1\message_buffer.h>

#include "Telemetry.h"
#include "Wifi.h"

/// UID for each task
enum TaskID
{
  TASK_COLLECT_TELEMETRY,
  TASK_RECEIVE_COMMAND,
  TASK_MOVE_BASE_SERVOS,
  TASK_PLAN_TRAJECTORY,
  NUM_TASKS,
};

/// Collect Telemetry Task Info
struct TaskCollectTelemetryInfo
{
  static constexpr const char* const NAME{"CollectTelem"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{128};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Receive Command Task Info
struct TaskReceiveCommandInfo
{
  static constexpr const char* const NAME{"ReceiveCommand"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{384};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Move Base Servos Task Info
struct TaskMoveBaseServosInfo
{
  static constexpr const char* const NAME{"MoveBaseServos"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{384};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Plan Trajectory Task Info
struct TaskPlanTrajectoryInfo
{
  static constexpr const char* const NAME{"PlanTrajectory"};
  static constexpr configSTACK_DEPTH_TYPE STACK_DEPTH{384};
  static constexpr UBaseType_t PRIORITY{2};
};

/// Collect Telemetry Task Parameters
struct CollectTelemetryParams
{
  WiFiUDP* telemSender; ///< Pointer to the telemetry sender object
  MessageBufferHandle_t msgBufferHandle; ///< Handle to the message buffer for this task to
                                         ///< receive telem rate commands
  Telemetry* telemetry; ///< Pointer to the telemetry object to collect data from
};

/// Receive Command Task Parameters
struct RecvCmdParams
{
  WiFiUDP* cmdReceiver; ///< Pointer to the command receiver object
  TaskHandle_t* taskHandles; ///< Pointer to the array of task handles
  MessageBufferHandle_t* msgBufferHandles; ///< Pointer to the array of message buffer handles
  Telemetry* telemetry; ///< Pointer to the telemetry object to collect data from
};

/// Move Base Servos Task Parameters
struct MoveBaseServoParams
{
  MessageBufferHandle_t msgBufferHandle; ///< Handle to the message buffer for this task to
                                         ///< receive move commands
  Telemetry* telemetry; ///< Pointer to the telemetry object to collect data from
};

/// Plan Trajectory Task Parameters
struct PlanTrajectoryParams
{
  MessageBufferHandle_t msgBufferHandle; ///< Handle to the message buffer for this task to
                                         ///< receive trajectory planning commands
  MessageBufferHandle_t moveCmdBufferHandle; ///< Handle to the message buffer for this task to
                                             ///< send move commands to the servos
  Telemetry* telemetry; ///< Pointer to the telemetry object to collect data from
};

/// Create all tasks needed for the lifetime of the telescope
///
/// @param[in] taskParams An array of pointers to the task parameters for each task.
///                       Parameter pointers within the container may be nullptr
/// @param[out] taskHandles An array of pointers to task handles generated by each
///                         task create call
///
/// @return The result of creating the tasks. pdPASS if successful
BaseType_t createTasks(void* taskParams[NUM_TASKS],
                       TaskHandle_t taskHandles[NUM_TASKS]); 

/// Periodically collect and report telemetry via the configured data interface
///
/// @param[in] params Holds a pointer to a CollectTelemetryParams object
void taskCollectTelemetry(void* params);

/// Receive commands from the configured command interface and execute them
///
/// @param[in] params Holds a pointer to a RecvCmdParams object
void taskReceiveCommand(void* params);

/// Move the vertical and horizontal servos to the specified positions
///
/// @param[in] params Holds a pointer to a MoveBaseParams object
void taskMoveBaseServos(void* params);

/// Plan a trajectory for the telescope to follow
///
/// @param[in] params Holds a pointer to a PlanTrajectoryParams object
void taskPlanTrajectory(void* params);

#endif